import json
import time
import pika
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

def connect_rabbitmq():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ"""
    try:
        connection = pika.BlockingConnection(
            pika.URLParameters("amqp://guest:guest@localhost:5672/")
        )
        channel = connection.channel()

        # –û–±—ä—è–≤–ª—è–µ–º exchange –∏ queue
        exchange_name = "resume_processing"
        queue_name = "resume_queue"

        channel.exchange_declare(
            exchange=exchange_name,
            exchange_type='direct',
            durable=True
        )

        channel.queue_declare(queue=queue_name, durable=True)
        channel.queue_bind(
            exchange=exchange_name,
            queue=queue_name,
            routing_key=queue_name
        )

        logger.info("‚úÖ Connected to RabbitMQ")
        return connection, channel, queue_name

    except Exception as e:
        logger.error(f"‚ùå Failed to connect to RabbitMQ: {e}")
        return None, None, None

def process_resume(message_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ - –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ"""
    print("\n" + "="*60)
    print("üîç –ü–û–õ–£–ß–ï–ù–û –ù–û–í–û–ï –†–ï–ó–Æ–ú–ï")
    print("="*60)

    # –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏–º JSON
    print(json.dumps(message_data, indent=2, ensure_ascii=False))

    print("-"*60)
    print(f"üìã ID —Ä–µ–∑—é–º–µ: {message_data.get('id', 'N/A')}")
    print(f"üíº ID –≤–∞–∫–∞–Ω—Å–∏–∏: {message_data.get('vacancy_id', 'N/A')}")
    print(f"üìß Email: {message_data.get('mail', 'N/A')}")
    print(f"üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {message_data.get('created_at', 'N/A')}")
    print(f"üíæ Storage Key: {message_data.get('storage_key', 'N/A')}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
    text_data = message_data.get('text_jsonb')
    if text_data:
        print(f"üìÑ –ï—Å—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ: {len(str(text_data))} —Å–∏–º–≤–æ–ª–æ–≤")

    print("-"*60)
    print("‚è≥ –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—é–º–µ...")

    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É 5 —Å–µ–∫—É–Ω–¥
    for i in range(5, 0, -1):
        print(f"‚è±Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞... {i} —Å–µ–∫—É–Ω–¥ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        time.sleep(1)

    print("‚úÖ –†–µ–∑—é–º–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
    print("="*60 + "\n")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ consumer –¥–ª—è —Ä–µ–∑—é–º–µ")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
    connection, channel, queue_name = connect_rabbitmq()
    if not connection:
        return

    try:
        logger.info("üëÄ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏...")
        logger.info("üìù –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                method_frame, header_frame, body = channel.basic_get(
                    queue=queue_name,
                    auto_ack=False
                )

                if method_frame:
                    # –ï—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        message_data = json.loads(body.decode('utf-8'))
                        process_resume(message_data)

                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                        channel.basic_ack(delivery_tag=method_frame.delivery_tag)
                        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                        channel.basic_nack(
                            delivery_tag=method_frame.delivery_tag,
                            requeue=False
                        )
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                        channel.basic_nack(
                            delivery_tag=method_frame.delivery_tag,
                            requeue=True
                        )
                else:
                    # –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                    print("üí§ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∂–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã...")
                    time.sleep(3)

            except pika.exceptions.ConnectionClosed:
                logger.warning("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                connection, channel, queue_name = connect_rabbitmq()
                if not connection:
                    time.sleep(10)
                    continue

    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if connection and not connection.is_closed:
            connection.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    main()
