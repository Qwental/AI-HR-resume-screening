import json
import pika
import uuid
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def send_test_resume():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –≤ –±—Ä–æ–∫–µ—Ä"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
        connection = pika.BlockingConnection(
            pika.URLParameters("amqp://guest:guest@localhost:5672/")
        )
        channel = connection.channel()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º exchange –∏ queue
        exchange_name = "resume_processing"
        queue_name = "resume_queue"

        channel.exchange_declare(
            exchange=exchange_name,
            exchange_type='direct',
            durable=True
        )
        channel.queue_declare(queue=queue_name, durable=True)
        channel.queue_bind(
            exchange=exchange_name,
            queue=queue_name,
            routing_key=queue_name
        )

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ
        test_resumes = [
            {
                "id": str(uuid.uuid4()),
                "vacancy_id": str(uuid.uuid4()),
                "created_at": datetime.now().isoformat(),
                "storage_key": "resumes/test_resume_1.pdf",
                "mail": "john.doe@example.com",
                "text_jsonb": {
                    "content": "Senior Python Developer —Å 5 –≥–æ–¥–∞–º–∏ –æ–ø—ã—Ç–∞. –ó–Ω–∞–Ω–∏–µ Django, FastAPI, PostgreSQL.",
                    "skills": ["Python", "Django", "PostgreSQL", "Redis", "Docker"],
                    "experience": "5 –ª–µ—Ç",
                    "education": "–í–£–ó: –ú–ì–£, –§–∞–∫—É–ª—å—Ç–µ—Ç –í–ú–ö"
                }
            },
            {
                "id": str(uuid.uuid4()),
                "vacancy_id": str(uuid.uuid4()),
                "created_at": datetime.now().isoformat(),
                "storage_key": "resumes/test_resume_2.pdf",
                "mail": "jane.smith@example.com",
                "text_jsonb": {
                    "content": "Full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. React, Node.js, Go, Kubernetes.",
                    "skills": ["React", "Node.js", "Go", "Kubernetes", "AWS"],
                    "experience": "3 –≥–æ–¥–∞",
                    "education": "–ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞"
                }
            },
            {
                "id": str(uuid.uuid4()),
                "vacancy_id": str(uuid.uuid4()),
                "created_at": datetime.now().isoformat(),
                "storage_key": "resumes/test_resume_3.pdf",
                "mail": "alex.petrov@example.com",
                "text_jsonb": {
                    "content": "DevOps Engineer. –û–ø—ã—Ç —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏, CI/CD, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.",
                    "skills": ["Docker", "Kubernetes", "Jenkins", "Prometheus", "Grafana"],
                    "experience": "4 –≥–æ–¥–∞",
                    "education": "–°–ü–±–ì–£"
                }
            }
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ä–µ–∑—é–º–µ
        for i, resume_data in enumerate(test_resumes, 1):
            message = json.dumps(resume_data, ensure_ascii=False)

            channel.basic_publish(
                exchange=exchange_name,
                routing_key=queue_name,
                body=message,
                properties=pika.BasicProperties(
                    content_type='application/json',
                    delivery_mode=2,  # Persistent
                    message_id=resume_data["id"]
                )
            )

            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ #{i}: {resume_data['mail']}")

        connection.close()
        logger.info(f"üéâ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(test_resumes)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—é–º–µ!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

if __name__ == "__main__":
    print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—é–º–µ –≤ RabbitMQ...")
    send_test_resume()
