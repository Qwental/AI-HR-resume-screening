import json
import os
import pika
import uuid
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ Go-—Å–µ—Ä–≤–∏—Å–∞ ---
RABBITMQ_HOST = os.getenv("RABBITMQ_HOST", "localhost")
RABBITMQ_URL = f"amqp://guest:guest@{RABBITMQ_HOST}:5672/"
EXCHANGE_NAME = "resume_exchange"
QUEUE_NAME = "resume_analysis_queue"
ROUTING_KEY = "resume_analysis_queue"


def send_test_resume():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –≤ –±—Ä–æ–∫–µ—Ä."""
    try:
        connection = pika.BlockingConnection(pika.URLParameters(RABBITMQ_URL))
        channel = connection.channel()

        channel.exchange_declare(exchange=EXCHANGE_NAME, exchange_type='direct', durable=True)
        channel.queue_declare(queue=QUEUE_NAME, durable=True)
        channel.queue_bind(exchange=EXCHANGE_NAME, queue=QUEUE_NAME, routing_key=ROUTING_KEY)

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–∞–∫ –æ—Ç Go-—Å–µ—Ä–≤–∏—Å–∞
        resume_id = str(uuid.uuid4())
        vacancy_id = str(uuid.uuid4())

        message_data = {
            "id": resume_id,
            "vacancy_id": vacancy_id,
            "text_resume_jsonb": {
                "text": "–û–ø—ã—Ç–Ω—ã–π Go —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –†–∞–±–æ—Ç–∞–ª —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏, PostgreSQL, Docker –∏ Kubernetes.",
                "extracted_at": datetime.now().isoformat()
            },
            "text_vacancy_jsonb": {
                "structured_data": {
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": "Senior Go Developer",
                    "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è": "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Go, gRPC, PostgreSQL. –£–≤–µ—Ä–µ–Ω–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.",
                    "–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
                },
                "extracted_at": datetime.now().isoformat()
            }
        }

        message_body = json.dumps(message_data, ensure_ascii=False)

        channel.basic_publish(
            exchange=EXCHANGE_NAME,
            routing_key=ROUTING_KEY,
            body=message_body,
            properties=pika.BasicProperties(
                content_type='application/json',
                delivery_mode=2,  # Persistent
                message_id=resume_id
            )
        )
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ. ID: {resume_id}")
        connection.close()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

if __name__ == "__main__":
    logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ RabbitMQ...")
    send_test_resume()
