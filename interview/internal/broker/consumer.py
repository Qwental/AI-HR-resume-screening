# –≠–¢–û –í–†–ï–ú–ï–ù–ù–´–ô –§–ê–ô–õ



import json
import os
import time
import pika
import logging
from pika.exceptions import AMQPConnectionError

from rich.console import Console
from rich.json import JSON
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.text import Text
from rich.layout import Layout

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

console = Console()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ Go-—Å–µ—Ä–≤–∏—Å–∞ ---
RABBITMQ_HOST = os.getenv("RABBITMQ_HOST", "localhost")
RABBITMQ_URL = f"amqp://guest:guest@{RABBITMQ_HOST}:5672/"
EXCHANGE_NAME = "resume_exchange"
QUEUE_NAME = "resume_analysis_queue"
ROUTING_KEY = "resume_analysis_queue"


def print_startup_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                  RESUME  consumer                        ‚ïë
    ‚ïë              –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ v1.0                 ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    console.print(banner, style="bold blue")


def connect_rabbitmq(retries=5, delay=5):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."""
    with console.status("[bold green]–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ...", spinner="dots"):
        for attempt in range(1, retries + 1):
            try:
                connection = pika.BlockingConnection(pika.URLParameters(RABBITMQ_URL))
                channel = connection.channel()
                channel.exchange_declare(exchange=EXCHANGE_NAME, exchange_type='direct', durable=True)
                channel.queue_declare(queue=QUEUE_NAME, durable=True)
                channel.queue_bind(exchange=EXCHANGE_NAME, queue=QUEUE_NAME, routing_key=ROUTING_KEY)

                console.print("‚úÖ [bold green]–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ[/bold green]")
                return connection, channel

            except AMQPConnectionError as e:
                console.print(f"‚ùå [bold red]–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å:[/bold red] {e}")
                if attempt == retries:
                    console.print("‚ùå [bold red]–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –í—ã—Ö–æ–¥.[/bold red]")
                    raise
                time.sleep(delay)
    return None, None


def display_resume_info(message_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—é–º–µ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    table = Table(title="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—é–º–µ", show_header=True, header_style="bold magenta")
    table.add_column("–ü–æ–ª–µ", style="cyan", no_wrap=True)
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")

    table.add_row("ID —Ä–µ–∑—é–º–µ", str(message_data.get('id', 'N/A')))
    table.add_row("ID –≤–∞–∫–∞–Ω—Å–∏–∏", str(message_data.get('vacancy_id', 'N/A')))
    table.add_row("–ö–∞–Ω–¥–∏–¥–∞—Ç", str(message_data.get('candidate_name', 'N/A')))
    table.add_row("Email", str(message_data.get('candidate_email', 'N/A')))
    table.add_row("–¢–µ–ª–µ—Ñ–æ–Ω", str(message_data.get('phone', 'N/A')))
    table.add_row("–û–ø—ã—Ç (–ª–µ—Ç)", str(message_data.get('experience_years', 'N/A')))

    console.print(table)


def display_json_data(title, data, style="blue"):
    """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–Ω–µ–ª–∏"""
    if data:
        json_text = JSON.from_data(data)
        panel = Panel(json_text, title=title, border_style=style)
        console.print(panel)
    else:
        empty_panel = Panel(
            Text("–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", style="italic red"),
            title=title,
            border_style="red"
        )
        console.print(empty_panel)


def simulate_ai_analysis(resume_id):
    """–°–∏–º—É–ª—è—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    processing_time = 3 + hash(resume_id) % 5

    with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console,
    ) as progress:
        task = progress.add_task("üß† –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è AI –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ...", total=processing_time)

        for i in range(processing_time):
            time.sleep(1)
            progress.update(task, advance=1)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    match_score = 50 + hash(resume_id) % 50
    return match_score


def display_analysis_results(match_score):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    if match_score >= 80:
        style = "bold green"
        emoji = "üéâ"
        status = "–û–¢–õ–ò–ß–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï"
    elif match_score >= 60:
        style = "bold yellow"
        emoji = "üëç"
        status = "–•–û–†–û–®–ï–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï"
    else:
        style = "bold red"
        emoji = "üëé"
        status = "–°–õ–ê–ë–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï"

    result_text = f"{emoji} {status}: {match_score}%"
    result_panel = Panel(
        Text(result_text, style=style, justify="center"),
        title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞",
        border_style=style.split()[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç –∏–∑ —Å—Ç–∏–ª—è
    )
    console.print(result_panel)


def process_resume(body):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
    try:
        message_data = json.loads(body)
    except json.JSONDecodeError as e:
        console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:[/bold red] {e}")
        return

    console.rule("üîç –ù–û–í–û–ï –†–ï–ó–Æ–ú–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê", style="bold blue")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—é–º–µ
    display_resume_info(message_data)

    # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ JSON –¥–∞–Ω–Ω—ã—Ö
    text_resume = message_data.get('text_resume_jsonb', {})
    text_vacancy = message_data.get('text_vacancy_jsonb', {})

    display_json_data("üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ", text_resume, "green")
    display_json_data("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏", text_vacancy, "blue")

    # AI –∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    resume_id = message_data.get('id', '')
    match_score = simulate_ai_analysis(resume_id)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    display_analysis_results(match_score)

    console.print("‚úÖ [bold green]–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ![/bold green]")
    console.rule(style="bold blue")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è consumer."""
    print_startup_banner()

    console.print("üöÄ [bold blue]–ó–∞–ø—É—Å–∫ AI consumer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ...[/bold blue]")

    while True:
        connection, channel = None, None
        try:
            connection, channel = connect_rabbitmq()
            console.print("üëÄ [bold cyan]–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π... (–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)[/bold cyan]")

            while True:
                method_frame, _, body = channel.basic_get(queue=QUEUE_NAME, auto_ack=False)
                if method_frame:
                    try:
                        process_resume(body)
                        channel.basic_ack(delivery_tag=method_frame.delivery_tag)
                        console.print("üëç [bold green]–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.[/bold green]")
                    except Exception as e:
                        console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:[/bold red] {e}")
                        channel.basic_nack(delivery_tag=method_frame.delivery_tag, requeue=True)
                else:
                    console.print("üí§ [dim]–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –æ–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...[/dim]")
                    time.sleep(3)

        except AMQPConnectionError as e:
            console.print(f"üîå [bold red]–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ:[/bold red] {e}. [yellow]–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...[/yellow]")
            time.sleep(10)
        except KeyboardInterrupt:
            console.print("üõë [bold yellow]–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.[/bold yellow]")
            break
        except Exception as e:
            console.print(f"‚ùå [bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:[/bold red] {e}")
            break
        finally:
            if connection and connection.is_open:
                connection.close()
                console.print("üîå [bold blue]–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ.[/bold blue]")


if __name__ == "__main__":
    main()
