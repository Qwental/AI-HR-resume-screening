import json
import os
import time
import pika
import logging
from pika.exceptions import AMQPConnectionError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ Go-—Å–µ—Ä–≤–∏—Å–∞ ---
RABBITMQ_HOST = os.getenv("RABBITMQ_HOST", "localhost")
RABBITMQ_URL = f"amqp://guest:guest@{RABBITMQ_HOST}:5672/"
EXCHANGE_NAME = "resume_exchange"
QUEUE_NAME = "resume_analysis_queue"
ROUTING_KEY = "resume_analysis_queue"


def connect_rabbitmq(retries=5, delay=5):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."""
    for attempt in range(1, retries + 1):
        try:
            connection = pika.BlockingConnection(pika.URLParameters(RABBITMQ_URL))
            channel = connection.channel()
            channel.exchange_declare(exchange=EXCHANGE_NAME, exchange_type='direct', durable=True)
            channel.queue_declare(queue=QUEUE_NAME, durable=True)
            channel.queue_bind(exchange=EXCHANGE_NAME, queue=QUEUE_NAME, routing_key=ROUTING_KEY)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ")
            return connection, channel
        except AMQPConnectionError as e:
            logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt == retries:
                logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –í—ã—Ö–æ–¥.")
                raise
            time.sleep(delay)
    return None, None

def process_resume(body):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    try:
        message_data = json.loads(body)
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return

    logger.info("="*60)
    logger.info(f"üîç –ü–û–õ–£–ß–ï–ù–û –†–ï–ó–Æ–ú–ï ID: {message_data.get('id', 'N/A')}")

    text_resume = message_data.get('text_resume_jsonb', {})
    text_vacancy = message_data.get('text_vacancy_jsonb', {})

    logger.info(f"üìÑ –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ: {len(json.dumps(text_resume))} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"üìã –¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏: {len(json.dumps(text_vacancy))} —Å–∏–º–≤–æ–ª–æ–≤")

    logger.info("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º AI –∞–Ω–∞–ª–∏–∑...")
    processing_time = 3 + hash(message_data.get('id', '')) % 5
    time.sleep(processing_time)

    match_score = 50 + hash(message_data.get('id', '')) % 50
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ {match_score}%")
    logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    logger.info("="*60)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è consumer."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI consumer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ...")

    while True:
        connection, channel = None, None
        try:
            connection, channel = connect_rabbitmq()
            logger.info("üëÄ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π... (–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")

            while True:
                method_frame, _, body = channel.basic_get(queue=QUEUE_NAME, auto_ack=False)
                if method_frame:
                    try:
                        process_resume(body)
                        channel.basic_ack(delivery_tag=method_frame.delivery_tag)
                        logger.info("üëç –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        channel.basic_nack(delivery_tag=method_frame.delivery_tag, requeue=True)
                else:
                    logger.info("üí§ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –æ–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...")
                    time.sleep(3)

        except AMQPConnectionError as e:
            logger.error(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            break
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break
        finally:
            if connection and connection.is_open:
                connection.close()
                logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    main()
