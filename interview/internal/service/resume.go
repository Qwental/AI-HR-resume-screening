package service

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"gorm.io/datatypes"
	"interview/internal/broker"
	"interview/internal/models"
	"interview/internal/repository"
	"interview/internal/storage"
	"io"
	"log"
	"path/filepath"
	"strings"
	"time"
)

const MaxResumeFileSize = 20 * 1024 * 1024 // 20MB

type ResumeService interface {
	CreateResume(ctx context.Context, resume *models.Resume, file io.Reader, filename string) error
	GetResume(ctx context.Context, id string) (*models.Resume, error)
	GetResumeWithFileURL(ctx context.Context, id string) (*models.Resume, error)
	GetResumesByVacancy(ctx context.Context, vacancyID string) ([]*models.Resume, error)
	DeleteResume(ctx context.Context, id string) error
	UpdateStatus(ctx context.Context, id, status string) error
	UpdateStatusAndResult(ctx context.Context, id, status string, result map[string]interface{}) error
	UpdateResult(ctx context.Context, id string, result map[string]interface{}) error
}

type resumeService struct {
	repo        repository.ResumeRepository
	storage     *storage.S3Storage
	vacancyRepo repository.VacancyRepository
	publisher   broker.Publisher // –±—É–¥–µ—Ç  –æ—Ç–ø–ø—Ä–∞–≤–ª—è—Ç—å –≤ –±—Ä–æ–∫–µ—Ä

}

func NewResumeService(
	repo repository.ResumeRepository,
	storage *storage.S3Storage,
	vacancyRepo repository.VacancyRepository,
	publisher broker.Publisher,
) ResumeService {
	return &resumeService{
		repo:        repo,
		storage:     storage,
		vacancyRepo: vacancyRepo,
		publisher:   publisher,
	}
}

func (s *resumeService) validateFileType(filename string) error {
	if filename == "" {
		return fmt.Errorf("filename cannot be empty")
	}

	ext := strings.ToLower(filepath.Ext(filename))
	allowedExts := []string{".docx", ".pdf", ".txt"}

	for _, allowedExt := range allowedExts {
		if ext == allowedExt {
			return nil
		}
	}

	return fmt.Errorf("unsupported file type: %s. Allowed types: %s",
		ext, strings.Join(allowedExts, ", "))
}

func (s *resumeService) CreateResume(ctx context.Context, resume *models.Resume, file io.Reader, filename string) error {
	if file == nil {
		return fmt.Errorf("file is required to create a resume")
	}

	if err := s.validateFileType(filename); err != nil {
		return err
	}

	//_ —ç—Ç–æ vacancy
	vacancy, err := s.vacancyRepo.GetByID(ctx, resume.VacancyID)
	if err != nil {
		return fmt.Errorf("vacancy not found: %w", err)
	}

	// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
	fileData, err := io.ReadAll(io.LimitReader(file, MaxResumeFileSize))
	if err != nil {
		return fmt.Errorf("failed to read file: %w", err)
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
	if len(fileData) == 0 {
		return fmt.Errorf("file is empty")
	}

	fileType := detectFileType(fileData)
	if fileType == FileTypeUnknown {
		return fmt.Errorf("unsupported file format. Please upload DOCX, PDF or TXT file")
	}

	log.Printf("üìÑ Processing %s file: %s (%d bytes)", getFileTypeName(fileType), filename, len(fileData))

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
	storageKey, err := s.storage.UploadResume(ctx, bytes.NewReader(fileData), filename)
	if err != nil {
		return fmt.Errorf("file upload error: %w", err)
	}

	resume.StorageKey = storageKey
	resume.Status = "–ü—Ä–æ—à–µ–ª –ø–∞—Ä—Å–µ—Ä"
	resume.CreatedAt = time.Now()

	if err := s.repo.Create(ctx, resume); err != nil {
		// –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3
		if deleteErr := s.storage.DeleteFile(ctx, storageKey); deleteErr != nil {
			log.Printf("‚ùå Failed to cleanup uploaded file after DB error: %v", deleteErr)
		}
		return fmt.Errorf("failed to create resume: %w", err)
	}

	log.Printf("‚úÖ Resume created successfully: %s", resume.ID)

	// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±—Ä–æ–∫–µ—Ä
	go s.processResumeAsync(resume, fileData, vacancy)

	return nil
}

// ‚Üê –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
func (s *resumeService) processResumeAsync(resume *models.Resume, fileData []byte, vacancy *models.Vacancy) {
	ctx := context.Background()

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—é–º–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
	resumeText, err := ExtractTextFromFile(fileData, resume.StorageKey)
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –¥–ª—è %s: %v", resume.ID, err)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∑—é–º–µ –Ω–∞ error
		if updateErr := s.repo.UpdateStatus(ctx, resume.ID, "error"); updateErr != nil {
			log.Printf("Failed to update resume status to error: %v", updateErr)
		}
		return
	}

	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ %s: %d —Å–∏–º–≤–æ–ª–æ–≤", resume.ID, len(resumeText))

	// --- –ù–û–í–û–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ü–õ–ï–ô–ù-–¢–ï–ö–°–¢ –≤ –ë–î (–∫–æ–ª–æ–Ω–∫–∞ text)
	if err := s.repo.UpdateText(ctx, resume.ID, resumeText); err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –≤ –ë–î –¥–ª—è %s: %v", resume.ID, err)
		// –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑
	} else {
		log.Printf("üíæ –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (–∫–æ–ª–æ–Ω–∫–∞ text)", resume.ID)
	}
	// --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
	var vacancyTextJSON datatypes.JSON
	var vacancyData *Job

	if vacancy.TextJSONB != nil && len(vacancy.TextJSONB) > 0 {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
		vacancyTextJSON = vacancy.TextJSONB

		var vacancyDataMap map[string]interface{}
		if err := json.Unmarshal(vacancy.TextJSONB, &vacancyDataMap); err == nil {
			if structuredData, ok := vacancyDataMap["structured_data"]; ok {
				if jsonBytes, err := json.Marshal(structuredData); err == nil {
					vacancyData = &Job{}
					json.Unmarshal(jsonBytes, vacancyData)
					log.Printf("Using existing vacancy data for vacancy %s", vacancy.ID)
				}
			}
		}
	} else if vacancy.StorageKey != "" {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
		log.Printf("Extracting vacancy data from file for vacancy %s", vacancy.ID)

		vacancyData, err = ExtractVacancyFromS3Key(ctx, s.storage, vacancy.StorageKey)
		if err != nil {
			log.Printf("Failed to extract vacancy data for vacancy %s: %v", vacancy.ID, err)
		} else {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
			vacancyDataMap := map[string]interface{}{
				"structured_data": vacancyData,
				"extracted_at":    time.Now(),
			}

			if jsonData, err := json.Marshal(vacancyDataMap); err == nil {
				vacancy.TextJSONB = datatypes.JSON(jsonData)
				vacancyTextJSON = vacancy.TextJSONB

				if err := s.vacancyRepo.Update(ctx, vacancy); err != nil {
					log.Printf("Failed to update vacancy %s: %v", vacancy.ID, err)
				} else {
					log.Printf("Vacancy %s data extracted and saved", vacancy.ID)
				}
			}
		}
	}

	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π JSON
	if vacancyTextJSON == nil {
		basicVacancyData := map[string]interface{}{
			"title":       vacancy.Title,
			"description": vacancy.Description,
			"created_at":  vacancy.CreatedAt,
		}
		if jsonData, err := json.Marshal(basicVacancyData); err == nil {
			vacancyTextJSON = datatypes.JSON(jsonData)
		}
	}

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
	resumeTextJSON := datatypes.JSON("{}")
	if resumeText != "" {
		resumeDataMap := map[string]interface{}{
			"text":         resumeText,
			"extracted_at": time.Now(),
			"file_name":    resume.StorageKey,
			"file_type":    string(getFileTypeName(detectFileType(fileData))),
			"size_bytes":   len(fileData),
		}
		if jsonData, err := json.Marshal(resumeDataMap); err == nil {
			resumeTextJSON = datatypes.JSON(jsonData)
		}
	}

	// üöÄ –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—Ä–æ–∫–µ—Ä
	message := broker.ResumeMessage{
		ID:          resume.ID,
		VacancyID:   resume.VacancyID,
		TextResume:  resumeTextJSON,     // JSON —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–µ–∑—é–º–µ
		TextVacancy: vacancyTextJSON,    // JSON —Å —Ç–µ–∫—Å—Ç–æ–º –≤–∞–∫–∞–Ω—Å–∏–∏
		WeightSoft:  vacancy.WeightSoft, // –í–µ—Å soft skills
		WeightHard:  vacancy.WeightHard, // –í–µ—Å hard skills
		WeightCase:  vacancy.WeightCase, // –í–µ—Å –∫–µ–π—Å–æ–≤/–æ–ø—ã—Ç–∞
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if err := s.publisher.PublishResumeMessage(ctx, message); err != nil {
		log.Printf("Failed to publish resume message for %s: %v", resume.ID, err)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∑—é–º–µ –Ω–∞ error
		if updateErr := s.repo.UpdateStatus(ctx, resume.ID, "error"); updateErr != nil {
			log.Printf("Failed to update resume status to error: %v", updateErr)
		}
	} else {
		log.Printf("‚úÖ Successfully published resume message: resume %s for vacancy %s", resume.ID, resume.VacancyID)

		//// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∑—é–º–µ –Ω–∞ processing
		//if updateErr := s.repo.UpdateStatus(ctx, resume.ID, ResumeStatusProcessing); updateErr != nil {
		//	log.Printf("Failed to update resume status to processing: %v", updateErr)
		//}
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	if resumeText != "" {
		log.Printf("üìÑ Resume text extracted: %d characters", len(resumeText))
	}
	if vacancyData != nil {
		log.Printf("üìã Vacancy data: %s", vacancyData.–ù–∞–∑–≤–∞–Ω–∏–µ)
	}
}

func (s *resumeService) GetResume(ctx context.Context, id string) (*models.Resume, error) {
	return s.repo.GetByID(ctx, id)
}

func (s *resumeService) GetResumeWithFileURL(ctx context.Context, id string) (*models.Resume, error) {
	resume, err := s.repo.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}

	if resume.StorageKey != "" {
		url, err := s.storage.GeneratePresignedURL(ctx, resume.StorageKey, time.Hour)
		if err == nil {
			resume.FileURL = url
		}
	}

	return resume, nil
}

func (s *resumeService) GetResumesByVacancy(ctx context.Context, vacancyID string) ([]*models.Resume, error) {
	resumes, err := s.repo.GetByVacancy(ctx, vacancyID)
	if err != nil {
		return nil, err
	}

	return resumes, nil
}

func (s *resumeService) DeleteResume(ctx context.Context, id string) error {
	existing, err := s.repo.GetByID(ctx, id)
	if err != nil {
		return fmt.Errorf("resume not found: %w", err)
	}

	if err := s.repo.Delete(ctx, id); err != nil {
		return fmt.Errorf("failed to delete resume: %w", err)
	}

	if existing.StorageKey != "" {
		go func() {
			ctx := context.Background()
			if err := s.storage.DeleteFile(ctx, existing.StorageKey); err != nil {
				fmt.Printf("Warning: failed to delete file %s: %v\n", existing.StorageKey, err)
			}
		}()
	}

	return nil
}

func (s *resumeService) UpdateStatus(ctx context.Context, id, status string) error {
	return s.repo.UpdateStatus(ctx, id, status)
}

func (s *resumeService) UpdateStatusAndResult(ctx context.Context, id, status string, result map[string]interface{}) error {
	return s.repo.UpdateStatusAndResult(ctx, id, status, result)
}

func (s *resumeService) UpdateResult(ctx context.Context, id string, result map[string]interface{}) error {

	return s.repo.UpdateResult(ctx, id, result)
}
