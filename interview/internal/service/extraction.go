package service

import (
	"archive/zip"
	"bytes"
	"context"
	"fmt"
	"github.com/guylaor/goword"
	"interview/internal/storage"
	"io"
	"log"
	"os"
	"regexp"
	"strings"

	"github.com/nguyenthenguyen/docx" // MIT License
)

type FileType int

const (
	FileTypeDOCX FileType = iota
	FileTypeDOC
	FileTypePDF
	FileTypeTXT
	FileTypeUnknown
)

type Job struct {
	–°—Ç–∞—Ç—É—Å           string `json:"status"`
	–ù–∞–∑–≤–∞–Ω–∏–µ         string `json:"title"`
	–†–µ–≥–∏–æ–Ω           string `json:"region"`
	–ì–æ—Ä–æ–¥            string `json:"city"`
	–ê–¥—Ä–µ—Å            string `json:"address"`
	–¢–∏–ø–¢—Ä—É–¥–æ–≤–æ–≥–æ     string `json:"employment_type"`
	–¢–∏–ø–ó–∞–Ω—è—Ç–æ—Å—Ç–∏     string `json:"work_type"`
	–ì—Ä–∞—Ñ–∏–∫           string `json:"schedule"`
	–î–æ—Ö–æ–¥            string `json:"income"`
	–û–∫–ª–∞–¥–ú–∞–∫—Å        string `json:"salary_max"`
	–û–∫–ª–∞–¥–ú–∏–Ω         string `json:"salary_min"`
	–ì–æ–¥–æ–≤–∞—è–ü—Ä–µ–º–∏—è    string `json:"annual_bonus"`
	–¢–∏–ø–ü—Ä–µ–º–∏—Ä–æ–≤–∞–Ω–∏—è  string `json:"bonus_type"`
	–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏      string `json:"responsibilities"`
	–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è       string `json:"requirements"`
	–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ      string `json:"education"`
	–û–ø—ã—Ç             string `json:"experience"`
	–ó–Ω–∞–Ω–∏–µ–ü—Ä–æ–≥—Ä–∞–º–º   string `json:"software_skills"`
	–ù–∞–≤—ã–∫–∏–ö–æ–º–ø—å—é—Ç–µ—Ä–∞ string `json:"computer_skills"`
	–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ–Ø–∑—ã–∫–∏ string `json:"languages"`
	–£—Ä–æ–≤–µ–Ω—å–Ø–∑—ã–∫–∞     string `json:"language_level"`
	–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏     string `json:"business_trips"`
	–î–æ–ø–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è    string `json:"additional_info"`
}

// DocxDocument –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞
type DocxDocument struct {
	Body DocxBody `xml:"body"`
}

type DocxBody struct {
	Paragraphs []DocxParagraph `xml:"p"`
}

type DocxParagraph struct {
	Runs []DocxRun `xml:"r"`
}

type DocxRun struct {
	Text []DocxText `xml:"t"`
}

type DocxText struct {
	Value string `xml:",chardata"`
}

func ExtractVacancyFromS3Key(ctx context.Context, storage *storage.S3Storage, storageKey string) (*Job, error) {
	reader, err := storage.DownloadFile(ctx, storageKey)
	if err != nil {
		return nil, fmt.Errorf("failed to download file from S3: %w", err)
	}
	defer reader.Close()

	tempFile, err := os.CreateTemp("", "extraction_*.docx")
	if err != nil {
		return nil, fmt.Errorf("failed to create temp file: %w", err)
	}
	defer os.Remove(tempFile.Name())
	defer tempFile.Close()

	_, err = io.Copy(tempFile, reader)
	if err != nil {
		return nil, fmt.Errorf("failed to copy file: %w", err)
	}

	text, err := goword.ParseText(tempFile.Name())
	if err != nil {
		return nil, fmt.Errorf("failed to parse docx file: %w", err)
	}

	lines := strings.Split(text, "\n")
	for i := range lines {
		lines[i] = strings.TrimSpace(lines[i])
	}

	job := &Job{}

	keyMap := map[string]*string{
		"–°—Ç–∞—Ç—É—Å":                       &job.–°—Ç–∞—Ç—É—Å,
		"–ù–∞–∑–≤–∞–Ω–∏–µ":                     &job.–ù–∞–∑–≤–∞–Ω–∏–µ,
		"–†–µ–≥–∏–æ–Ω":                       &job.–†–µ–≥–∏–æ–Ω,
		"–ì–æ—Ä–æ–¥":                        &job.–ì–æ—Ä–æ–¥,
		"–ê–¥—Ä–µ—Å":                        &job.–ê–¥—Ä–µ—Å,
		"–¢–∏–ø —Ç—Ä—É–¥–æ–≤–æ–≥–æ":                &job.–¢–∏–ø–¢—Ä—É–¥–æ–≤–æ–≥–æ,
		"–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏":                &job.–¢–∏–ø–ó–∞–Ω—è—Ç–æ—Å—Ç–∏,
		"–¢–µ–∫—Å—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã":          &job.–ì—Ä–∞—Ñ–∏–∫,
		"–î–æ—Ö–æ–¥ (—Ä—É–±/–º–µ—Å)":              &job.–î–æ—Ö–æ–¥,
		"–û–∫–ª–∞–¥ –º–∞–∫—Å. (—Ä—É–±/–º–µ—Å)":        &job.–û–∫–ª–∞–¥–ú–∞–∫—Å,
		"–û–∫–ª–∞–¥ –º–∏–Ω. (—Ä—É–±/–º–µ—Å)":         &job.–û–∫–ª–∞–¥–ú–∏–Ω,
		"–ì–æ–¥–æ–≤–∞—è –ø—Ä–µ–º–∏—è (%)":           &job.–ì–æ–¥–æ–≤–∞—è–ü—Ä–µ–º–∏—è,
		"–¢–∏–ø –ø—Ä–µ–º–∏—Ä–æ–≤–∞–Ω–∏—è. –û–ø–∏—Å–∞–Ω–∏–µ":   &job.–¢–∏–ø–ü—Ä–µ–º–∏—Ä–æ–≤–∞–Ω–∏—è,
		"–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (–¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)": &job.–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏,
		"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (–¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)":  &job.–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,
		"–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è":          &job.–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ,
		"–¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã":        &job.–û–ø—ã—Ç,
		"–ó–Ω–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º":  &job.–ó–Ω–∞–Ω–∏–µ–ü—Ä–æ–≥—Ä–∞–º–º,
		"–ù–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ":  &job.–ù–∞–≤—ã–∫–∏–ö–æ–º–ø—å—é—Ç–µ—Ä–∞,
		"–ó–Ω–∞–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤":    &job.–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ–Ø–∑—ã–∫–∏,
		"–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–∞":       &job.–£—Ä–æ–≤–µ–Ω—å–Ø–∑—ã–∫–∞,
		"–ù–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ–∫":         &job.–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏,
		"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":    &job.–î–æ–ø–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è,
	}

	var currentKey *string
	var buffer []string

	for _, line := range lines {
		if line == "" {
			continue
		}

		if ptr, ok := keyMap[line]; ok {
			if currentKey != nil {
				*currentKey = strings.Join(buffer, " ")
			}
			currentKey = ptr
			buffer = nil
		} else if currentKey != nil {
			buffer = append(buffer, line)
		}
	}

	if currentKey != nil {
		*currentKey = strings.Join(buffer, " ")
	}

	return job, nil
}

//	func extractResumeFromDocx(file io.Reader) (string, error) {
//		tempFile, err := os.CreateTemp("", "extract_*.docx")
//		if err != nil {
//			return "", fmt.Errorf("failed to create temp file: %w", err)
//		}
//		defer os.Remove(tempFile.Name())
//		defer tempFile.Close()
//
//		_, err = io.Copy(tempFile, file)
//		if err != nil {
//			return "", fmt.Errorf("failed to copy file: %w", err)
//		}
//
//		text, err := goword.ParseText(tempFile.Name())
//		if err != nil {
//			return "", fmt.Errorf("failed to parse docx: %w", err)
//		}
//
//		return strings.TrimSpace(text), nil
//	}
//
// detectFileType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
func detectFileType(data []byte) FileType {
	if len(data) < 4 {
		return FileTypeUnknown
	}

	// DOCX —Ñ–∞–π–ª—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å ZIP signature
	if bytes.Equal(data[:4], []byte{0x50, 0x4B, 0x03, 0x04}) {
		return FileTypeDOCX
	}

	// PDF —Ñ–∞–π–ª—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "%PDF"
	if bytes.Equal(data[:4], []byte{0x25, 0x50, 0x44, 0x46}) {
		return FileTypePDF
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
	if isTextFile(data) {
		return FileTypeTXT
	}

	return FileTypeUnknown
}

// extractFromTXT –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
func extractFromTXT(fileData []byte) (string, error) {
	return strings.TrimSpace(string(fileData)), nil
}

// isTextFile –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–º
func isTextFile(data []byte) bool {
	if len(data) == 0 {
		return false
	}

	sample := data
	if len(sample) > 512 {
		sample = sample[:512]
	}

	for _, b := range sample {
		if b == 0 || (b < 32 && b != 9 && b != 10 && b != 13) {
			return false
		}
	}
	return true
}

// getFileTypeName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
func getFileTypeName(fileType FileType) string {
	switch fileType {
	case FileTypeDOCX:
		return "DOCX"
	case FileTypePDF:
		return "PDF"
	case FileTypeTXT:
		return "TXT"
	default:
		return "Unknown"
	}
}

// ExtractTextFromFile –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
func ExtractTextFromFile(fileData []byte, filename string) (string, error) {
	if len(fileData) == 0 {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π —Ñ–∞–π–ª")
	}

	fileType := detectFileType(fileData)

	log.Printf("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∏–ø —Ñ–∞–π–ª–∞: %s –¥–ª—è %s", getFileTypeName(fileType), filename)

	switch fileType {
	case FileTypeDOCX:
		return extractFromDOCXFree(fileData)
	case FileTypePDF:
		//return extractFromPDFFree(fileData)
		return "", fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: %s", getFileTypeName(fileType))

	case FileTypeTXT:
		return extractFromTXT(fileData)
	default:
		return "", fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: %s", getFileTypeName(fileType))
	}
}

// extractFromDOCXFree –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ DOCX –∏—Å–ø–æ–ª—å–∑—É—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
func extractFromDOCXFree(fileData []byte) (string, error) {
	// –°–ø–æ—Å–æ–± 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º github.com/nguyenthenguyen/docx
	tempFile, err := os.CreateTemp("", "extract_*.docx")
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: %w", err)
	}
	defer os.Remove(tempFile.Name())
	defer tempFile.Close()

	if _, err := tempFile.Write(fileData); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: %w", err)
	}
	tempFile.Close()

	// –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å docx –±–∏–±–ª–∏–æ—Ç–µ–∫—É
	doc, err := docx.ReadDocxFile(tempFile.Name())
	if err == nil {
		defer doc.Close()

		docText := doc.Editable()
		if docText != nil {
			text := docText.GetContent()
			if text != "" {
				return strings.TrimSpace(text), nil
			}
		}
	}

	log.Printf("‚ö†Ô∏è docx –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: %v", err)

	// –°–ø–æ—Å–æ–± 2: –ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞ (—Å–∞–º–æ–ø–∏—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä)
	if text, err := extractDOCXFromZip(fileData); err == nil {
		return text, nil
	} else {
		log.Printf("‚ö†Ô∏è ZIP extraction –Ω–µ —É–¥–∞–ª–∞—Å—å: %v", err)
	}

	return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞")
}

// extractDOCXFromZip –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ DOCX –∫–∞–∫ –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞
func extractDOCXFromZip(fileData []byte) (string, error) {
	reader := bytes.NewReader(fileData)

	zipReader, err := zip.NewReader(reader, int64(len(fileData)))
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º ZIP –∞—Ä—Ö–∏–≤–æ–º: %w", err)
	}

	// –ò—â–µ–º document.xml —Ñ–∞–π–ª
	for _, file := range zipReader.File {
		if file.Name == "word/document.xml" {
			rc, err := file.Open()
			if err != nil {
				continue
			}
			defer rc.Close()

			content, err := io.ReadAll(rc)
			if err != nil {
				continue
			}

			// –ü–∞—Ä—Å–∏–º XML –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
			return parseDocumentXML(content), nil
		}
	}

	return "", fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω document.xml –≤ –∞—Ä—Ö–∏–≤–µ")
}

// parseDocumentXML –ø–∞—Ä—Å–∏—Ç document.xml –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç
func parseDocumentXML(xmlContent []byte) string {
	// –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É <w:t> —Ç–µ–≥–∞–º–∏
	re := regexp.MustCompile(`<w:t[^>]*>(.*?)</w:t>`)
	matches := re.FindAllStringSubmatch(string(xmlContent), -1)

	var result strings.Builder
	for _, match := range matches {
		if len(match) > 1 {
			// –î–µ–∫–æ–¥–∏—Ä—É–µ–º XML entities
			text := strings.ReplaceAll(match[1], "&lt;", "<")
			text = strings.ReplaceAll(text, "&gt;", ">")
			text = strings.ReplaceAll(text, "&amp;", "&")
			text = strings.ReplaceAll(text, "&quot;", "\"")
			text = strings.ReplaceAll(text, "&apos;", "'")

			result.WriteString(text)
			result.WriteString(" ")
		}
	}

	return strings.TrimSpace(result.String())
}

// extractFromPDFFree –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF –∏—Å–ø–æ–ª—å–∑—É—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
//func extractFromPDFFree(fileData []byte) (string, error) {
//	tempFile, err := os.CreateTemp("", "extract_*.pdf")
//	if err != nil {
//		return "", err
//	}
//	defer os.Remove(tempFile.Name())
//	defer tempFile.Close()
//
//	if _, err := tempFile.Write(fileData); err != nil {
//		return "", err
//	}
//	tempFile.Close()
//
//	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
//	text, err := api.ExtractTextFile(tempFile.Name(), nil, nil)
//	if err != nil {
//		return "", fmt.Errorf("pdfcpu extraction failed: %w", err)
//	}
//
//	return strings.TrimSpace(string(text)), nil
//}
