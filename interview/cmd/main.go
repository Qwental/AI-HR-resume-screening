package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"

	"interview/internal/broker"
	"interview/internal/config"
	"interview/internal/db"
	"interview/internal/handlers"
	"interview/internal/repository"
	"interview/internal/service"
	"interview/internal/storage"
	"interview/middleware"
)

func main() {
	log.Println("üöÄ Starting AI-HR Interview Service...")

	// ====================================
	// 1. –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
	// ====================================
	log.Println("üìÅ Loading configuration...")
	cfg := config.Load()

	// ====================================
	// 2. –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•
	// ====================================
	log.Println("üóÑÔ∏è Connecting to PostgreSQL database...")
	database := db.Connect(cfg.Database)
	log.Println("‚úÖ Database connected successfully")

	// ====================================
	// 3. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø S3 –•–†–ê–ù–ò–õ–ò–©–ê
	// ====================================
	log.Println("üóÉÔ∏è Initializing S3 storage...")
	s3Client := storage.NewS3Client(
		getEnv("AWS_S3_ENDPOINT", "http://minio:9000"),
		getEnv("AWS_REGION", "ru-1"),
		getEnv("AWS_ACCESS_KEY_ID", "minioadmin"),
		getEnv("AWS_SECRET_ACCESS_KEY", "minioadmin123"),
	)

	s3Storage := storage.NewS3Storage(
		s3Client,
		getEnv("AWS_S3_BUCKET", "interview-files"),
		getEnv("AWS_REGION", "ru-1"),
	)
	log.Println("‚úÖ S3 storage initialized")

	// ====================================
	// 4. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø RABBITMQ
	// ====================================
	log.Println("üê∞ Initializing RabbitMQ publisher...")
	var publisher broker.Publisher

	if rabbitmqPublisher, err := broker.NewRabbitMQPublisher(
		getEnv("RABBITMQ_URL", "amqp://guest:guest@rabbitmq:5672/"),
		getEnv("RABBITMQ_EXCHANGE", "resume_exchange"),
		getEnv("RABBITMQ_QUEUE", "resume_analysis_queue"),
	); err != nil {
		log.Printf("‚ö†Ô∏è Failed to create RabbitMQ publisher: %v", err)
		log.Println("üîÑ Using NullPublisher as fallback...")
		publisher = broker.NewNullPublisher()
	} else {
		log.Println("‚úÖ RabbitMQ publisher initialized")
		publisher = rabbitmqPublisher
	}

	// ====================================
	// 5. –°–û–ó–î–ê–ù–ò–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í (DATA LAYER)
	// ====================================
	log.Println("üóÇÔ∏è Initializing repositories...")
	vacancyRepo := repository.NewVacancyRepository(database)
	resumeRepo := repository.NewResumeRepository(database)
	//interviewRepo := repository.NewInterviewRepository(database)
	log.Println("‚úÖ Repositories initialized")

	// ====================================
	// 6. –°–û–ó–î–ê–ù–ò–ï –°–ï–†–í–ò–°–û–í (BUSINESS LOGIC)
	// ====================================
	log.Println("‚öôÔ∏è Initializing services...")
	vacancySvc := service.NewVacancyService(vacancyRepo, s3Storage)
	resumeSvc := service.NewResumeService(resumeRepo, s3Storage, vacancyRepo, publisher)
	//interviewSvc := service.NewInterviewService(interviewRepo)
	log.Println("‚úÖ Services initialized")

	// ====================================
	// 7. –ù–ê–°–¢–†–û–ô–ö–ê GIN –§–†–ï–ô–ú–í–û–†–ö–ê
	// ====================================
	if getEnv("GIN_MODE", "debug") == "release" {
		gin.SetMode(gin.ReleaseMode)
	}

	// ====================================
	// 8. –°–û–ó–î–ê–ù–ò–ï –†–û–£–¢–ï–†–ê –ò MIDDLEWARE
	// ====================================
	router := gin.Default()

	// –ë–∞–∑–æ–≤—ã–π CORS middleware
	router.Use(middleware.CorsMiddleware())

	// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Next.js —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
	router.Use(cors.New(cors.Config{
		AllowOrigins: []string{
			"http://localhost:3000", // Next.js dev —Å–µ—Ä–≤–µ—Ä
			"http://frontend:3000",  // Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
		},
		AllowMethods: []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowHeaders: []string{
			"Origin", "Content-Type", "Accept", "Authorization",
			"X-Requested-With", "Content-Length",
		},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	// ====================================
	// 9. –°–û–ó–î–ê–ù–ò–ï HTTP HANDLERS
	// ====================================
	log.Println("üîó Setting up handlers...")
	vacancyHandler := handlers.NewVacancyHandler(vacancySvc)
	resumeHandler := handlers.NewResumeHandler(resumeSvc)
	//interviewHandler := handlers.NewInterviewHandler(interviewSvc)

	// ====================================
	// 10. –ù–ê–°–¢–†–û–ô–ö–ê –ú–ê–†–®–†–£–¢–û–í (ROUTES)
	// ====================================
	log.Println("üõ£Ô∏è Setting up routes...")

	// Health check endpoint (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
	router.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"status":    "ok",
			"message":   "AI-HR Interview Service is running!",
			"timestamp": time.Now().Format(time.RFC3339),
			"version":   "1.0.0",
		})
	})

	// –ì—Ä—É–ø–ø–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤
	api := router.Group("/api")

	// –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç JWT —Ç–æ–∫–µ–Ω)
	authorized := api.Group("/")
	authorized.Use(middleware.TokenAuthMiddleware())

	// ====================================
	// 10.1 –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –í–ê–ö–ê–ù–°–ò–ô
	// ====================================
	vacancies := authorized.Group("/vacancies")
	{
		// –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤)
		vacancies.POST("",
			middleware.RequireRoleMiddleware("hr_specialist"),
			vacancyHandler.Create)

		// –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π (–≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
		vacancies.GET("", vacancyHandler.GetAll)
		vacancies.GET("/:id", vacancyHandler.GetByID)
		vacancies.GET("/:id/download", vacancyHandler.GetDownloadLink)

		// ‚úÖ –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£ - —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏
		vacancies.GET("/:id/resumes", resumeHandler.GetByVacancy)

		// –ì—Ä—É–ø–ø–∞ –¥–µ–π—Å—Ç–≤–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
		hrVacancyActions := vacancies.Group("")
		hrVacancyActions.Use(middleware.RequireRoleMiddleware("hr_specialist"))
		{
			hrVacancyActions.PUT("/:id", vacancyHandler.Update)
			hrVacancyActions.PUT("/:id/file", vacancyHandler.UpdateWithFile)
			hrVacancyActions.DELETE("/:id", vacancyHandler.Delete)
		}
	}

	// ====================================
	// 10.2 –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –†–ï–ó–Æ–ú–ï
	// ====================================
	resumes := authorized.Group("/resumes")
	{
		// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
		resumes.POST("", resumeHandler.Create)
		resumes.GET("/:id", resumeHandler.GetByID)

		// –ì—Ä—É–ø–ø–∞ –¥–µ–π—Å—Ç–≤–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
		hrResumeActions := resumes.Group("")
		hrResumeActions.Use(middleware.RequireRoleMiddleware("hr_specialist"))
		{
			//hrResumeActions.GET("", resumeHandler.GetAll) // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∑—é–º–µ
			hrResumeActions.GET("/:id/download", resumeHandler.GetDownloadLink)
			//hrResumeActions.PUT("/:id", resumeHandler.Update)
			hrResumeActions.DELETE("/:id", resumeHandler.Delete)
		}
	}

	log.Println("‚úÖ Routes configured successfully")

	// ====================================
	// 11. –ù–ê–°–¢–†–û–ô–ö–ê HTTP –°–ï–†–í–ï–†–ê
	// ====================================
	port := getEnv("PORT", "8081")
	server := &http.Server{
		Addr:           ":" + port,
		Handler:        router,
		ReadTimeout:    30 * time.Second,
		WriteTimeout:   30 * time.Second,
		IdleTimeout:    120 * time.Second,
		MaxHeaderBytes: (1 << 20) * 10, // 10MB
	}

	// ====================================
	// 12. GRACEFUL SHUTDOWN
	// ====================================
	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Println("üéØ Server configuration:")
		log.Printf("   ‚û§ Port: %s", port)
		log.Printf("   ‚û§ Environment: %s", getEnv("GIN_MODE", "debug"))
		log.Printf("   ‚û§ Database: %s:%s/%s", cfg.Database.Host, cfg.Database.Port, cfg.Database.DBName)
		log.Printf("   ‚û§ S3 Endpoint: %s", getEnv("AWS_S3_ENDPOINT", "http://minio:9000"))
		log.Printf("   ‚û§ RabbitMQ: %s", getEnv("RABBITMQ_URL", "amqp://guest:guest@rabbitmq:5672/"))

		log.Printf("üåü AI-HR Interview Service started successfully on port %s", port)
		log.Printf("üåç Available endpoints:")
		log.Printf("   ‚û§ Health Check: http://localhost:%s/health", port)
		log.Printf("   ‚û§ API Base: http://localhost:%s/api", port)

		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("‚ùå Server failed to start: %v", err)
		}
	}()

	// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-quit
	log.Println("üõë Shutting down server...")

	// Graceful shutdown —Å —Ç–∞–π–º–∞—É—Ç–æ–º 30 —Å–µ–∫—É–Ω–¥
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		log.Fatalf("‚ùå Server forced to shutdown: %v", err)
	}

	log.Println("‚úÖ AI-HR Interview Service stopped gracefully")
}

// ====================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ====================================

// getEnv –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}
