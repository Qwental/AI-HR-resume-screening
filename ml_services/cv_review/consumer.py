# ml_services/cv_review/consumer.py
import json
import logging
import os
import time
from datetime import datetime

import pika
import psycopg2
import psycopg2.extras
import requests
from rich.console import Console
from rich.json import JSON
from rich.panel import Panel
from rich.table import Table

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
RABBITMQ_HOST = os.getenv("RABBITMQ_HOST", "localhost")
RABBITMQ_URL = f"amqp://guest:guest@{RABBITMQ_HOST}:5672/"
CV_REVIEW_SERVICE = os.getenv("CV_REVIEW_SERVICE", "http://localhost:5030")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_USER = os.getenv("DB_USER", "postgres")
DB_PASSWORD = os.getenv("DB_PASSWORD", "postgres")
DB_NAME = os.getenv("DB_NAME", "aihrservicedb")
DB_PORT = os.getenv("DB_PORT", "5432")

EXCHANGE_NAME = "resume_exchange"
QUEUE_NAME = "resume_analysis_queue"
ROUTING_KEY = "resume_analysis_queue"

console = Console()
logger = logging.getLogger(__name__)


def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    try:
        connection = psycopg2.connect(
            host=DB_HOST,
            port=DB_PORT,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )
        return connection
    except Exception as e:
        console.print(f"üí• [bold red]–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:[/bold red] {e}")
        return None


def extract_email_from_ai_response(ai_response):
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ email –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò
    :param ai_response: Dict —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –ò–ò —Å–µ—Ä–≤–∏—Å–∞
    :return: Email –∏–ª–∏ 'user_has_no_mail'
    """
    try:
        console.print(f"üîç [bold cyan]–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ email –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò...[/bold cyan]")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(ai_response, dict):
            console.print(f"‚ö†Ô∏è [bold yellow]–û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –ø–æ–ª—É—á–µ–Ω: {type(ai_response)}[/bold yellow]")
            return 'user_has_no_mail'

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ email
        email_field = ai_response.get('email', [])
        console.print(f"üìß –ü–æ–ª–µ email: {email_field} (—Ç–∏–ø: {type(email_field)})")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ª—É—á–∞–∏
        if isinstance(email_field, list):
            if len(email_field) > 0:
                # –ï—Å—Ç—å email –≤ —Å–ø–∏—Å–∫–µ
                first_email = email_field[0]
                if isinstance(first_email, str) and first_email.strip():
                    extracted_email = first_email.strip()
                    console.print(f"‚úÖ [bold green]–ù–∞–π–¥–µ–Ω email: '{extracted_email}'[/bold green]")
                    return extracted_email
                else:
                    console.print(f"‚ö†Ô∏è [bold yellow]–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø—É—Å—Ç–æ–π[/bold yellow]")
            else:
                console.print(f"‚ö†Ô∏è [bold yellow]–°–ø–∏—Å–æ–∫ email –ø—É—Å—Ç[/bold yellow]")
        elif isinstance(email_field, str):
            if email_field.strip():
                extracted_email = email_field.strip()
                console.print(f"‚úÖ [bold green]–ù–∞–π–¥–µ–Ω email (—Å—Ç—Ä–æ–∫–∞): '{extracted_email}'[/bold green]")
                return extracted_email
            else:
                console.print(f"‚ö†Ô∏è [bold yellow]Email —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è[/bold yellow]")
        else:
            console.print(f"‚ö†Ô∏è [bold yellow]Email –ø–æ–ª–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞: {type(email_field)}[/bold yellow]")

        console.print(f"‚ùå [bold red]Email –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'user_has_no_mail'[/bold red]")
        return 'user_has_no_mail'

    except Exception as e:
        console.print(f"üí• [bold red]–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è email:[/bold red] {e}")
        return 'user_has_no_mail'

def save_analysis_to_database(resume_id, ai_response, extracted_email):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ –ë–î
    :param resume_id: ID —Ä–µ–∑—é–º–µ (UUID)
    :param ai_response: Dict —Å –ø–æ–ª–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –ò–ò
    :param extracted_email: –ù–∞–π–¥–µ–Ω–Ω—ã–π email –∏–ª–∏ 'user_has_no_mail'
    :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    connection = get_db_connection()
    if not connection:
        console.print(f"‚ùå [bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î[/bold red]")
        return False

    try:
        cursor = connection.cursor()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –ò–ò –≤ JSON –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        analysis_json = json.dumps(ai_response, ensure_ascii=False)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ email –¥–ª—è –ë–î
        email_for_db = None if extracted_email == 'user_has_no_mail' else extracted_email

        console.print(f"üíæ [bold cyan]–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î:[/bold cyan]")
        console.print(f"üìã Resume ID: {resume_id}")
        console.print(f"üìß Email –¥–ª—è –ë–î: {email_for_db}")
        console.print(f"üìä –†–∞–∑–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞: {len(analysis_json)} —Å–∏–º–≤–æ–ª–æ–≤")

        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ
        update_query = """
            UPDATE resumes 
            SET 
                resume_analysis_jsonb = %s::jsonb,
                mail = %s,
                status = 'analyzed'
            WHERE id = %s
        """

        cursor.execute(update_query, (analysis_json, email_for_db, resume_id))
        connection.commit()

        if cursor.rowcount > 0:
            console.print(f"‚úÖ [bold green]–†–µ–∑—é–º–µ {resume_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î[/bold green]")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
            cursor.execute(
                "SELECT mail, status FROM resumes WHERE id = %s",
                (resume_id,)
            )
            result = cursor.fetchone()
            if result:
                saved_mail, saved_status = result
                console.print(f"üîç [bold cyan]–ü—Ä–æ–≤–µ—Ä–∫–∞: mail='{saved_mail}', status='{saved_status}'[/bold cyan]")

            return True
        else:
            console.print(f"‚ö†Ô∏è [bold yellow]–†–µ–∑—é–º–µ {resume_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è[/bold yellow]")
            return False

    except Exception as e:
        console.print(f"üí• [bold red]–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:[/bold red] {e}")
        import traceback
        console.print(traceback.format_exc())
        connection.rollback()
        return False
    finally:
        cursor.close()
        connection.close()


def log_message_received(message_data):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    console.print("\n" + "=" * 60, style="bold blue")
    console.print("üì• –ü–û–õ–£–ß–ï–ù–û –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï", style="bold green", justify="center")
    console.print("=" * 60, style="bold blue")

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    info_table = Table(title="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ", show_header=True)
    info_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan", no_wrap=True)
    info_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")

    resume_id = message_data.get('id', 'N/A')
    vacancy_id = message_data.get('vacancy_id', 'N/A')

    info_table.add_row("üÜî ID —Ä–µ–∑—é–º–µ", resume_id)
    info_table.add_row("üìã ID –≤–∞–∫–∞–Ω—Å–∏–∏", vacancy_id)
    info_table.add_row("‚è∞ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è", datetime.now().strftime("%H:%M:%S"))

    # –í–µ—Å–∞ –Ω–∞–≤—ã–∫–æ–≤
    weight_soft = message_data.get('weight_soft', 33)
    weight_hard = message_data.get('weight_hard', 33)
    weight_case = message_data.get('weight_case', 34)
    total_weight = weight_soft + weight_hard + weight_case

    info_table.add_row("üí™ Hard Skills", f"{weight_hard}%")
    info_table.add_row("ü§ù Soft Skills", f"{weight_soft}%")
    info_table.add_row("üíº –û–ø—ã—Ç/–ö–µ–π—Å—ã", f"{weight_case}%")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Å–æ–≤
    if total_weight == 100:
        info_table.add_row("‚úÖ –°—É–º–º–∞ –≤–µ—Å–æ–≤", f"{total_weight}% (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")
    else:
        info_table.add_row("‚ö†Ô∏è –°—É–º–º–∞ –≤–µ—Å–æ–≤", f"{total_weight}% (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 100%)")

    console.print(info_table)

    # –†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    resume_text = message_data.get('text_resume_jsonb', {})
    vacancy_text = message_data.get('text_vacancy_jsonb', {})

    cv_text = resume_text.get('text', '') if resume_text else ''
    vacancy_data = vacancy_text.get('structured_data', {}) if vacancy_text else {}

    size_table = Table(title="üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
    size_table.add_column("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö", style="cyan")
    size_table.add_column("–†–∞–∑–º–µ—Ä", style="green")

    size_table.add_row("üìÑ –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ", f"{len(cv_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    size_table.add_row("üìã –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", f"{len(str(vacancy_data))} —Å–∏–º–≤–æ–ª–æ–≤")

    console.print(size_table)

    return resume_id, cv_text, vacancy_data, weight_soft, weight_hard, weight_case


def log_ai_request_details(resume_id, review_request, skillvals):
    """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò"""
    console.print(f"\nüöÄ [bold yellow]–î–ï–¢–ê–õ–ò –ó–ê–ü–†–û–°–ê –ö –ò–ò –°–ï–†–í–ò–°–£[/bold yellow]")
    console.print("=" * 80, style="bold yellow")

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
    console.print(f"üìã –†–µ–∑—é–º–µ ID: [bold cyan]{resume_id}[/bold cyan]")
    console.print(f"ü§ñ –°–µ—Ä–≤–∏—Å –ò–ò: [bold cyan]{CV_REVIEW_SERVICE}[/bold cyan]")
    console.print(f"‚öñÔ∏è –í–µ—Å–∞ –Ω–∞–≤—ã–∫–æ–≤: [bold cyan]{skillvals}[/bold cyan]")

    # –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
    console.print("\nüì¶ [bold green]–°–û–î–ï–†–ñ–ò–ú–û–ï –ó–ê–ü–†–û–°–ê:[/bold green]")

    # –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    vacancy_json = review_request.get('vacancy', '')
    try:
        vacancy_parsed = json.loads(vacancy_json) if vacancy_json else {}
        vacancy_panel = Panel(
            JSON(vacancy_parsed, indent=2),  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            title="üìã –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (vacancy)",
            border_style="blue",
            expand=False
        )
        console.print(vacancy_panel)
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ vacancy: {e}")
        console.print(f"üìã –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (raw): {vacancy_json[:200]}...")

    # –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
    cv_text = review_request.get('cv', '')
    cv_preview = cv_text[:300] + "..." if len(cv_text) > 300 else cv_text
    cv_panel = Panel(
        cv_preview,
        title=f"üìÑ –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ ({len(cv_text)} —Å–∏–º–≤–æ–ª–æ–≤)",
        border_style="green",
        expand=False
    )
    console.print(cv_panel)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params_table = Table(title="üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞")
    params_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
    params_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")

    for key, value in review_request.items():
        if key == 'cv':
            params_table.add_row(key, f"{len(str(value))} —Å–∏–º–≤–æ–ª–æ–≤")
        elif key == 'vacancy':
            params_table.add_row(key, f"{len(str(value))} —Å–∏–º–≤–æ–ª–æ–≤ JSON")
        else:
            params_table.add_row(key, str(value))

    console.print(params_table)

def log_ai_response_details(resume_id, response, processing_time):
    """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò"""
    console.print(f"\nüì® [bold green]–û–¢–í–ï–¢ –û–¢ –ò–ò –°–ï–†–í–ò–°–ê[/bold green]")
    console.print("=" * 80, style="bold green")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—Ç–≤–µ—Ç–µ
    response_table = Table(title="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–≤–µ—Ç–µ")
    response_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
    response_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")

    response_table.add_row("üìã –†–µ–∑—é–º–µ ID", str(resume_id))
    response_table.add_row("üî¢ HTTP —Å—Ç–∞—Ç—É—Å", str(response.status_code))
    response_table.add_row("‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{processing_time}—Å")
    response_table.add_row("üìè –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞", f"{len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")

    console.print(response_table)

    if response.status_code == 200:
        console.print("\n‚úÖ [bold green]–£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢:[/bold green]")

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
            analysis_result = response.json()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º JSON –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            result_panel = Panel(
                JSON(analysis_result, indent=2),
                title="üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (JSON)",
                border_style="green",
                expand=True
            )
            console.print(result_panel)

            # –í–ê–ñ–ù–û: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
            return analysis_result  # –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—å

        except json.JSONDecodeError:
            # –ï—Å–ª–∏ –Ω–µ JSON, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            text_result = response.text
            result_panel = Panel(
                text_result,
                title="üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (–¢–µ–∫—Å—Ç)",
                border_style="green",
                expand=True
            )
            console.print(result_panel)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ
            console.print(f"‚ö†Ô∏è [bold yellow]–í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–≤–µ—Ç –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ![/bold yellow]")
            return text_result
    else:
        console.print(f"\n‚ùå [bold red]–û–®–ò–ë–ö–ê –û–¢–í–ï–¢–ê:[/bold red]")

        error_panel = Panel(
            response.text,
            title=f"üí• HTTP {response.status_code} - –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏",
            border_style="red",
            expand=True
        )
        console.print(error_panel)

        return None

def process_resume_message(body):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ RabbitMQ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
    try:
        message_data = json.loads(body)

        # üì• –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        resume_id, cv_text, vacancy_data, weight_soft, weight_hard, weight_case = log_message_received(message_data)

        # üéØ –§–æ—Ä–º–∏—Ä—É–µ–º skillvals –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        skillvals = f"hard_skills:{weight_hard},soft_skills:{weight_soft},experience:{weight_case}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ CV Review —Å–µ—Ä–≤–∏—Å—É
        review_request = {
            "vacancy": json.dumps(vacancy_data),
            "cv": cv_text,
            "skillvals": skillvals
        }

        # üöÄ –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò
        log_ai_request_details(resume_id, review_request, skillvals)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ FastAPI —Å–µ—Ä–≤–∏—Å—É
        console.print(f"\nüåê [bold yellow]–û—Ç–ø—Ä–∞–≤–∫–∞ HTTP GET –∑–∞–ø—Ä–æ—Å–∞...[/bold yellow]")
        start_time = time.time()

        response = requests.get(
            f"{CV_REVIEW_SERVICE}/get_review",
            params=review_request,
            timeout=120  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –ò–ò
        )

        end_time = time.time()
        processing_time = round(end_time - start_time, 2)

        # üìä –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞
        analysis_result = log_ai_response_details(resume_id, response, processing_time)

        if response.status_code == 200 and analysis_result is not None:
            # –î–û–ë–ê–í–ò–ú –ü–†–û–í–ï–†–ö–£ –¢–ò–ü–ê
            if isinstance(analysis_result, str):
                console.print(f"‚ö†Ô∏è [bold yellow]–í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–≤–µ—Ç –ò–ò –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å...[/bold yellow]")
                try:
                    analysis_result = json.loads(analysis_result)
                    console.print(f"‚úÖ [bold green]–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ JSON[/bold green]")
                except json.JSONDecodeError:
                    console.print(f"‚ùå [bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ JSON[/bold red]")
                    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
                    analysis_result = {
                        "error": "invalid_json_format",
                        "raw_response": analysis_result[:500] + "..." if len(analysis_result) > 500 else analysis_result
                    }

            # üìß –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò (—Ç–µ–ø–µ—Ä—å analysis_result —Ç–æ—á–Ω–æ —Å–ª–æ–≤–∞—Ä—å)
            extracted_email = extract_email_from_ai_response(analysis_result)
            console.print(f"üéØ [bold blue]–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π email: '{extracted_email}'[/bold blue]")

            # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
            db_success = save_analysis_to_database(resume_id, analysis_result, extracted_email)

            if db_success:
                # üéâ –ü–æ–ª–Ω—ã–π —É—Å–ø–µ—Ö
                console.print("\n" + "üéâ " * 30)
                console.print(f"[bold green]‚úÖ –†–ï–ó–Æ–ú–ï {resume_id} –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–†–ê–ë–û–¢–ê–ù–û –ò –°–û–•–†–ê–ù–ï–ù–û![/bold green]",
                              justify="center")
                console.print(f"[bold green]üìß EMAIL: {extracted_email}[/bold green]", justify="center")
                console.print(f"[bold green]üíæ –ê–ù–ê–õ–ò–ó –°–û–•–†–ê–ù–ï–ù –í –ë–î[/bold green]", justify="center")
                console.print("üéâ " * 30)
            else:
                # ‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–µ–ª, –Ω–æ –ë–î –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
                console.print("\n" + "‚ö†Ô∏è " * 30)
                console.print(
                    f"[bold yellow]‚ö†Ô∏è –†–ï–ó–Æ–ú–ï {resume_id} –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–û, –ù–û –ù–ï –°–û–•–†–ê–ù–ï–ù–û –í –ë–î[/bold yellow]",
                    justify="center")
                console.print("‚ö†Ô∏è " * 30)

        else:
            console.print("\n" + "üí• " * 30)
            console.print(f"[bold red]‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –†–ï–ó–Æ–ú–ï {resume_id}![/bold red]", justify="center")
            console.print("üí• " * 30)

    except json.JSONDecodeError as e:
        console.print(f"üí• [bold red]–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ RabbitMQ:[/bold red] {e}")
    except requests.exceptions.Timeout:
        console.print(f"‚è∞ [bold red]–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò —Å–µ—Ä–≤–∏—Å—É![/bold red]")
    except requests.exceptions.ConnectionError:
        console.print(f"üîå [bold red]–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ò–ò —Å–µ—Ä–≤–∏—Å—É![/bold red]")
    except Exception as e:
        console.print(f"üí• [bold red]–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_resume_message:[/bold red] {e}")
        import traceback
        console.print(traceback.format_exc())


def print_startup_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                 ü§ñ AI RESUME ANALYZER                    ‚ïë
‚ïë                    Consumer v3.0                         ‚ïë
‚ïë          üíæ WITH DATABASE INTEGRATION üìß                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    console.print(banner, style="bold blue")


def test_db_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    console.print("üîå [bold cyan]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...[/bold cyan]")
    connection = get_db_connection()
    if connection:
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT COUNT(*) FROM resumes;")
            count = cursor.fetchone()[0]
            console.print(f"‚úÖ [bold green]–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {count} —Ä–µ–∑—é–º–µ[/bold green]")
            cursor.close()
            connection.close()
            return True
        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:[/bold red] {e}")
            connection.close()
            return False
    return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è consumer"""
    print_startup_banner()
    console.print("üöÄ [bold blue]–ó–∞–ø—É—Å–∫ AI Consumer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î...[/bold blue]")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not test_db_connection():
        console.print("üí• [bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.[/bold red]")
        return

    processed_count = 0

    while True:
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ
            console.print("\nüîå [bold cyan]–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ...[/bold cyan]")
            connection = pika.BlockingConnection(pika.URLParameters(RABBITMQ_URL))
            channel = connection.channel()

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–∏
            channel.exchange_declare(exchange='resume_exchange', exchange_type='direct', durable=True)
            channel.queue_declare(queue='resume_analysis_queue', durable=True)
            channel.queue_bind(exchange='resume_exchange', queue='resume_analysis_queue',
                               routing_key='resume_analysis_queue')

            console.print("‚úÖ [bold green]–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ[/bold green]")
            console.print(f"üëÄ [bold cyan]–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π... (–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count})[/bold cyan]")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            while True:
                method_frame, _, body = channel.basic_get(queue='resume_analysis_queue', auto_ack=False)
                if method_frame:
                    process_resume_message(body)
                    channel.basic_ack(delivery_tag=method_frame.delivery_tag)
                    processed_count += 1

                    console.print(f"\nüìä [bold blue]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} —Ä–µ–∑—é–º–µ[/bold blue]")
                else:
                    console.print("üí§ [dim]–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –æ–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...[/dim]")
                    time.sleep(3)

        except Exception as e:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:[/bold red] {e}")
            console.print("üîÑ [yellow]–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...[/yellow]")
            time.sleep(10)


if __name__ == "__main__":
    main()
