package main

import (
	"ai-hr-service/internal/auth"
	"ai-hr-service/internal/config"
	"ai-hr-service/internal/database"
	"ai-hr-service/internal/middleware"
	"ai-hr-service/internal/utils"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
)

func main() {
	// –≥—Ä—É–∑–∏–º –∫—Ñ–≥ –¥–ª—è –ë–î—à–∫–∏
	cfg := config.Load()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	utils.InitJWT(&cfg.JWT)

	db := database.Connect(cfg.Database) // –∫–æ–Ω–Ω–µ–∫—Ç –∫ –±–∞–∑–µ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –∫—Ñ–≥

	// —Å–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
	authRepo := auth.NewRepository(db)
	tokenService := auth.NewTokenService(db)               // –ù–û–í–û–ï: —Å–µ—Ä–≤–∏—Å —Ç–æ–∫–µ–Ω–æ–≤
	authService := auth.NewService(authRepo, tokenService) // –û–ë–ù–û–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º tokenService
	authHandler := auth.NewHandler(authService)

	// —Å–æ–∑–¥–∞–µ–º middleware
	authMiddleware := middleware.NewAuthMiddleware(db) // –ù–û–í–û–ï: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π middleware

	// —Ä–æ—É—Ç–µ—Ä
	r := gin.Default()

	// —Å—Ç–∞—Å—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
	r.Static("/static", "./static")
	r.StaticFile("/", "./static/index.html")
	r.StaticFile("/login", "./static/login.html")
	r.StaticFile("/register", "./static/register.html")
	r.StaticFile("/dashboard", "./static/dashboard.html")

	// Health check endpoint
	r.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"status":  "ok",
			"message": "AI-HR-SERVICE is running!",
			"time":    time.Now().Format(time.RFC3339),
		})
	})

	// API —Ä–æ—É—Ç—ã - —Ç—É—Ç –≤—Å—è –º–∞–≥–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
	api := r.Group("/api")
	{
		// –ø–∞–±–ª–∏–∫ —Ä–æ—É—Ç—ã - —Å—é–¥–∞ –º–æ–∂–µ—Ç –ª—é–±–æ–π –∑–∞–π—Ç–∏
		authGroup := api.Group("/auth")
		{
			authGroup.POST("/register", authHandler.Register)
			authGroup.POST("/login", authHandler.Login)
			authGroup.POST("/refresh", authHandler.RefreshToken) // –ù–û–í–û–ï: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
		}

		// –ø—Ä–æ—Ç–µ–∫—Ç–µ–¥ —Ä–æ—É—Ç—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		protected := api.Group("/")
		protected.Use(authMiddleware.TokenAuth()) // –û–ë–ù–û–í–õ–ï–ù–û: –Ω–æ–≤—ã–π middleware
		{
			protected.GET("/profile", authHandler.GetProfile) // –ü—Ä–æ—Ñ–∏–ª—å —é–∑–µ—Ä–∞

			// –ù–û–í–´–ï: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
			protected.POST("/auth/logout", authHandler.Logout)        // –í—ã—Ö–æ–¥
			protected.POST("/auth/logout-all", authHandler.LogoutAll) // –í—ã—Ö–æ–¥ —Å–æ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

			// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–æ—É—Ç
			protected.GET("/protected", func(c *gin.Context) {
				username, _ := c.Get("username")
				role, _ := c.Get("role")
				utils.SuccessResponse(c, http.StatusOK, gin.H{
					"message":  "This is a protected endpoint",
					"username": username,
					"role":     role,
				})
			})
		}

		// HR —Ä–æ—É—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è HR-–æ–≤
		hr := api.Group("/hr")
		hr.Use(authMiddleware.TokenAuth(), authMiddleware.RequireRole("hr_specialist")) // –û–ë–ù–û–í–õ–ï–ù–û: –Ω–æ–≤–∞—è —Ä–æ–ª—å
		{
			hr.GET("/dashboard", func(c *gin.Context) {
				username, _ := c.Get("username")
				c.JSON(200, gin.H{
					"message": "Welcome to HR Dashboard",
					"user":    username,
				})
			})

			// –ù–û–í–û–ï: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ HR endpoints
			hr.GET("/vacancies", func(c *gin.Context) {
				c.JSON(200, gin.H{
					"message": "HR Vacancies",
					"data":    []string{"Vacancy 1", "Vacancy 2"}, // –∑–∞–≥–ª—É—à–∫–∞
				})
			})
		}

		// –ù–û–í–û–ï: —Ä–æ—É—Ç—ã –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
		candidate := api.Group("/candidate")
		candidate.Use(authMiddleware.TokenAuth(), authMiddleware.RequireRole("candidate"))
		{
			candidate.GET("/interviews", func(c *gin.Context) {
				username, _ := c.Get("username")
				c.JSON(200, gin.H{
					"message": "Your interviews",
					"user":    username,
				})
			})
		}

		// –ù–û–í–û–ï: –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ—É—Ç—ã
		admin := api.Group("/admin")
		admin.Use(authMiddleware.TokenAuth(), authMiddleware.RequireRole("admin"))
		{
			admin.GET("/users", func(c *gin.Context) {
				c.JSON(200, gin.H{
					"message": "All users (admin only)",
					"admin":   c.MustGet("username"),
				})
			})

			admin.GET("/stats", func(c *gin.Context) {
				userID := c.MustGet("user_id").(uint)
				count, _ := tokenService.GetUserActiveTokensCount(userID)

				c.JSON(200, gin.H{
					"message":       "System stats",
					"active_tokens": count,
				})
			})
		}
	}

	// –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
	go func() {
		ticker := time.NewTicker(1 * time.Hour)
		defer ticker.Stop()

		for {
			select {
			case <-ticker.C:
				if err := tokenService.CleanupExpiredTokens(); err != nil {
					log.Printf("Failed to cleanup expired tokens: %v", err)
				} else {
					log.Println("Expired tokens cleaned up successfully")
				}
			}
		}
	}()

	//—Å—Ç–∞—Ä—Ç
	log.Printf("üöÄ Server starting on port %s", cfg.Server.Port)
	log.Printf("üíæ Database: %s:%s/%s", cfg.Database.Host, cfg.Database.Port, cfg.Database.DBName)
	log.Printf("üîê JWT Access TTL: %s", cfg.JWT.AccessTokenTTL)
	log.Printf("üîÑ JWT Refresh TTL: %s", cfg.JWT.RefreshTokenTTL)

	if err := r.Run(":" + cfg.Server.Port); err != nil {
		log.Fatal("Failed to start server:", err)
	}
}
